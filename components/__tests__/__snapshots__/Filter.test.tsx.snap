// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Filter /> snapshot test with categories 1`] = `
<RCTScrollView
  accessibilityHint="Swipe horizontally to browse different category filters"
  accessibilityLabel="Category filters"
  accessibilityRole="tablist"
  accessible={true}
  contentContainerClassName="gap-x-2 pb-3"
  data={
    [
      {
        "$id": "all",
        "name": "All",
      },
      {
        "$collectionId": "collection1",
        "$createdAt": "2024-01-01T00:00:00.000Z",
        "$databaseId": "database1",
        "$id": "cat1",
        "$permissions": [],
        "$updatedAt": "2024-01-01T00:00:00.000Z",
        "description": "Delicious pizza",
        "name": "Pizza",
      },
      {
        "$collectionId": "collection1",
        "$createdAt": "2024-01-01T00:00:00.000Z",
        "$databaseId": "database1",
        "$id": "cat2",
        "$permissions": [],
        "$updatedAt": "2024-01-01T00:00:00.000Z",
        "description": "Tasty burgers",
        "name": "Burger",
      },
      {
        "$collectionId": "collection1",
        "$createdAt": "2024-01-01T00:00:00.000Z",
        "$databaseId": "database1",
        "$id": "cat3",
        "$permissions": [],
        "$updatedAt": "2024-01-01T00:00:00.000Z",
        "description": "Fresh salads",
        "name": "Salad",
      },
    ]
  }
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={true}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={0.0001}
  showsHorizontalScrollIndicator={false}
  stickyHeaderIndices={[]}
  testID="filter-list"
  viewabilityConfigCallbackPairs={[]}
>
  <View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={
        [
          {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessibilityHint="Tap to filter by All"
        accessibilityLabel="All filter"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": false,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "opacity": 1,
          }
        }
        testID="filter-item-all"
      >
        <Text
          accessible={false}
          className="body-medium"
          testID="filter-text-all"
        >
          All
        </Text>
      </View>
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={
        [
          {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessibilityHint="Pizza filter is currently active"
        accessibilityLabel="Pizza filter"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": true,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "opacity": 1,
          }
        }
        testID="filter-item-cat1"
      >
        <Text
          accessible={false}
          className="body-medium"
          testID="filter-text-cat1"
        >
          Pizza
        </Text>
      </View>
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={
        [
          {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessibilityHint="Tap to filter by Burger"
        accessibilityLabel="Burger filter"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": false,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "opacity": 1,
          }
        }
        testID="filter-item-cat2"
      >
        <Text
          accessible={false}
          className="body-medium"
          testID="filter-text-cat2"
        >
          Burger
        </Text>
      </View>
    </View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={
        [
          {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessibilityHint="Tap to filter by Salad"
        accessibilityLabel="Salad filter"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": false,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "opacity": 1,
          }
        }
        testID="filter-item-cat3"
      >
        <Text
          accessible={false}
          className="body-medium"
          testID="filter-text-cat3"
        >
          Salad
        </Text>
      </View>
    </View>
  </View>
</RCTScrollView>
`;

exports[`<Filter /> snapshot test without categories 1`] = `
<RCTScrollView
  accessibilityHint="Swipe horizontally to browse different category filters"
  accessibilityLabel="Category filters"
  accessibilityRole="tablist"
  accessible={true}
  contentContainerClassName="gap-x-2 pb-3"
  data={
    [
      {
        "$id": "all",
        "name": "All",
      },
    ]
  }
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={true}
  keyExtractor={[Function]}
  onContentSizeChange={[Function]}
  onLayout={[Function]}
  onMomentumScrollBegin={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={0.0001}
  showsHorizontalScrollIndicator={false}
  stickyHeaderIndices={[]}
  testID="filter-list"
  viewabilityConfigCallbackPairs={[]}
>
  <View>
    <View
      onFocusCapture={[Function]}
      onLayout={[Function]}
      style={
        [
          {
            "flexDirection": "row",
          },
          null,
        ]
      }
    >
      <View
        accessibilityHint="Tap to filter by All"
        accessibilityLabel="All filter"
        accessibilityRole="button"
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": false,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          {
            "opacity": 1,
          }
        }
        testID="filter-item-all"
      >
        <Text
          accessible={false}
          className="body-medium"
          testID="filter-text-all"
        >
          All
        </Text>
      </View>
    </View>
  </View>
</RCTScrollView>
`;
